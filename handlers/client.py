from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from ai_model import collect_messages
from dialog_db import create_db
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
import schedule
import re
from keyboards import kb_client 


async def command_start(message : types.Message):
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, –Ø –±–æ—Ç-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –†–£–ö–°–ò. –Ø –∑–Ω–∞—é –æ –†–ö–°–ò –≤—Å–µ –Ω—É –∏–ª–∏ –ø–æ—á—Ç–∏ –≤—Å—ë. –ß—Ç–æ–±—ã –≤ —ç—Ç–æ–º —É–±–µ–¥–∏—Ç—å—Å—è –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å ^.^ ', reply_markup=kb_client)


class FSMClient(StatesGroup):
    register = State()
    schedule = State()


async def command_s—Åhedule(message : types.Message):
    if not create_db.check_user(message.from_user.id):
        await FSMClient.register.set()
        await message.reply("üìù–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É ^.^")
    else:
        await FSMClient.schedule.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–ª–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–ù–∞–ø—Ä–∏–º–µ—Ä, –ö—Ä–∞–≤—á–µ–Ω–∫–æ  –ò.–Æ.), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–¥—Ç–∏ –≤ –∫–æ–ª–ª–µ–¥–∂–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'")


# @dp.message_handler(state=FSMClient.register)
async def register_user(message : types.Message, state:FSMContext):
    create_db.register_user((message.from_user.id, message.from_user.username, message.text.lower())) 
    await FSMClient.next()
    await message.reply('''–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!ü•≥
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–ª–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–ù–∞–ø—Ä–∏–º–µ—Ä, –ö—Ä–∞–≤—á–µ–Ω–∫–æ  –ò.–Æ.) ^.^ ''')


async def show_schedule(message : types.Message, state:FSMContext):
    # response = f'{message.text}'
    pattern_group = re.compile(r'\b\w{2}-\d{2}\b')
    pattern_teacher = re.compile(r'[–ê-–Ø][–∞-—è]+\s[–ê-–Ø]\.[–ê-–Ø]\.')
    
    if pattern_group.match(message.text):
        group_schedule = schedule.get_group_schedule(message.text.upper())
        for day_schedule in group_schedule:
            str = ''
            str += f"{'‚Äî' * 10}\nüìÖ{day_schedule[0]}\n{'‚Äî' * 10}\n\n"
            for lesson in day_schedule[1:]:
                str += f"‚è≥: {lesson['–í—Ä–µ–º—è']}\nüìí: {lesson['–ü—Ä–µ–¥–º–µ—Ç']}\nüéì: {lesson['–û–±—â–Ω–æ—Å—Ç—å']}\nüîë: {lesson['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}\n\n"
            await bot.send_message(message.from_user.id, str)

    elif pattern_teacher.match(message.text):
        response = schedule.get_teacher_schedule(message.text)
        for day_schedule in response:
            str = ''
            str += f"{'‚Äî' * 10}\nüìÖ{day_schedule[0]}\n{'‚Äî' * 10}\n\n"
            for lesson in day_schedule[1:]:
                str += f"‚è≥: {lesson['–í—Ä–µ–º—è']}\nüìí: {lesson['–ü—Ä–µ–¥–º–µ—Ç']}\nüéì: {lesson['–û–±—â–Ω–æ—Å—Ç—å']}\nüîë: {lesson['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}\n\n"
            await bot.send_message(message.from_user.id, str)
    else:
        await bot.send_message(message.from_user.id, "–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –Ω–æ–º–µ—Ä–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ^.^")

    await state.finish()  


@dp.message_handler(state="*", commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
async def cancel(message:types.Message, state:FSMContext):
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.finish()
    await message.reply('–ö–∞–∫ —Å–∫–∞–∂–µ—Ç–µ ^.^')

    
async def command_gpt(message : types.Message):
    await bot.send_message(message.from_user.id, '‚åõÔ∏è–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ^.^ ')
    try :
        response = collect_messages(message.text) 
        await bot.send_message(message.from_user.id, response)   
        await create_db.insert_data((message.from_user.username, message.text, response))
    except Exception as ex:
        await bot.send_message(message.from_user.id, '–¢—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ^.^')
        print('–¢—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω')


def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(command_start, commands=['start'])
    dp.register_message_handler(command_s—Åhedule, commands=['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'], state=None)
    dp.register_message_handler(register_user, state=FSMClient.register)
    dp.register_message_handler(show_schedule, state=FSMClient.schedule)
    dp.register_message_handler(cancel, state="*", commands='–æ—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(command_gpt)