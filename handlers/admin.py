from create_bot import dp, bot
from aiogram import types
from dialog_db import create_db
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from keyboards import kb_admin

ID = None

class FSMAdmin(StatesGroup):
    group = State()
    time = State()
    mess = State()
    

@dp.message_handler(commands=['moderator'], is_chat_admin=True)
async def check_admin(message:types.Message):
    global ID
    ID = message.from_user.id
    
    await bot.send_message(message.from_user.id, '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ^.^', reply_markup=kb_admin)
    await message.delete()


@dp.message_handler(commands='–ù–∞–ø–∏—Å–∞—Ç—å', state=None)
async def cm_start(message : types.Message):
    if message.from_user.id == ID:
        await FSMAdmin.group.set()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É: ')


@dp.message_handler(state="*", commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
async def cancel(message:types.Message, state:FSMContext):
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.finish()
    await message.reply('–í—Å–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã ^.^')


@dp.message_handler(state=FSMAdmin.group)
async def select_group(message : types.Message, state : FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['group'] = message.text.lower()
        await FSMAdmin.next()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É: (XX —Å–µ–Ω—Ç—è–±—Ä—è)')


@dp.message_handler(state=FSMAdmin.time)
async def inp_datatime(message : types.Message, state : FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['time'] = message.text
        await FSMAdmin.next()
        await message.reply(f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: ')


@dp.message_handler(state=FSMAdmin.mess)
async def add_message(message : types.Message, state : FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['message'] = message.text
            all_users = create_db.select_groups(data['group'])
            if all_users:
                for user in all_users:
                    try:
                        await bot.send_message(user, f'üïò {data["time"].upper()}\nüë®‚Äçüë©‚Äçüë¶‚Äçüë¶ {data["group"].upper()}\nüì© {data["message"]}' )
                    except:
                        print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏')
                await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ^.^")
            else:
                await message.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã ^.^")
        await state.finish()


def register_handlers_admin(dp : Dispatcher):
    dp.register_message_handler(check_admin, commands=['moderator'], is_chat_admin=True)
    dp.register_message_handler(cm_start, commands='–ò–∑–º–µ–Ω–∏—Ç—å', state=None)
    dp.register_message_handler(select_group, state=FSMAdmin.group)
    dp.register_message_handler(inp_datatime, state=FSMAdmin.time)
    dp.register_message_handler(add_message, state=FSMAdmin.mess)